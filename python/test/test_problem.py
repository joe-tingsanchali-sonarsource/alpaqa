import alpaqa
import numpy as np

class MyProblem:
    def __init__(self):
        self.n = 3 # Number of variables
        self.m = 2 # Number of constraints
    def eval_proj_diff_g(self, z: np.ndarray, e: np.ndarray) -> None: ...
    def eval_proj_multipliers(self, y: np.ndarray, M: float) -> None: ...
    def eval_prox_grad_step(self, γ: float, x: np.ndarray, grad_ψ: np.ndarray, x_hat: np.ndarray, p: np.ndarray) -> float: ...
    def eval_inactive_indices_res_lna(self, γ: float, x: np.ndarray, grad_ψ: np.ndarray, J: np.ndarray) -> int: ...
    def eval_f(self, x: np.ndarray) -> float: ...
    def eval_grad_f(self, x: np.ndarray, grad_fx: np.ndarray) -> None: ...
    def eval_g(self, x: np.ndarray, gx: np.ndarray) -> None: ...
    def eval_grad_g_prod(self, x: np.ndarray, y: np.ndarray, grad_gxy: np.ndarray) -> None: ...
    def eval_grad_gi(self, x: np.ndarray, i: int, grad_gi: np.ndarray) -> None: ...
    def eval_hess_L_prod(self, x: np.ndarray, y: np.ndarray, scale: float, v: np.ndarray, Hv: np.ndarray) -> None: ...
    def eval_hess_ψ_prod(self, x: np.ndarray, y: np.ndarray, Σ: np.ndarray, scale: float, v: np.ndarray, Hv: np.ndarray) -> None: ...
    def eval_f_grad_f(self, x: np.ndarray, grad_fx: np.ndarray) -> float: ...
    def eval_f_g(self, x: np.ndarray, g: np.ndarray) -> float: ...
    def eval_grad_f_grad_g_prod(self, x: np.ndarray, y: np.ndarray, grad_f: np.ndarray, grad_gxy: np.ndarray) -> None: ...
    def eval_grad_L(self, x: np.ndarray, y: np.ndarray, grad_L: np.ndarray, work_n: np.ndarray) -> None: ...
    def eval_ψ(self, x: np.ndarray, y: np.ndarray, Σ: np.ndarray, ŷ: np.ndarray) -> float: ...
    def eval_grad_ψ(self, x: np.ndarray, y: np.ndarray, Σ: np.ndarray, grad_ψ: np.ndarray, work_n: np.ndarray, work_m: np.ndarray) -> None: ...
    def eval_ψ_grad_ψ(self, x: np.ndarray, y: np.ndarray, Σ: np.ndarray, grad_ψ: np.ndarray, work_n: np.ndarray, work_m: np.ndarray) -> float: ...
    def get_box_C(self) -> alpaqa.Box: ...
    def get_box_D(self) -> alpaqa.Box: ...
    def check(self): ...

def test_problem_obj():
    problem = alpaqa.Problem(MyProblem())

    assert problem.n == 3
    assert problem.m == 2
    assert problem.provides_eval_inactive_indices_res_lna()
    assert not problem.provides_eval_jac_g()
    assert not problem.provides_get_jac_g_sparsity()
    assert problem.provides_eval_grad_gi()
    assert problem.provides_eval_hess_L_prod()
    assert not problem.provides_eval_hess_L()
    assert not problem.provides_get_hess_L_sparsity()
    assert problem.provides_eval_hess_ψ_prod()
    assert not problem.provides_eval_hess_ψ()
    assert not problem.provides_get_hess_ψ_sparsity()
    assert problem.provides_eval_f_grad_f()
    assert problem.provides_eval_f_g()
    assert problem.provides_eval_grad_f_grad_g_prod()
    assert problem.provides_eval_grad_L()
    assert problem.provides_eval_ψ()
    assert problem.provides_eval_grad_ψ()
    assert problem.provides_eval_ψ_grad_ψ()
    assert problem.provides_get_box_C()
    assert problem.provides_get_box_D()
    assert problem.provides_check()
