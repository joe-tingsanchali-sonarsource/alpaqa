name: Build and Scan with SonarQube

on:
  push:
    branches:
      - develop
  pull_request:
    types: [opened, synchronize, reopened]

env:
  PYTHON_VERSION: '3.11'

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    container: ubuntu:jammy
    strategy:
      matrix:
        host: [x86_64-centos7-linux-gnu]
    env:
      CMAKE_C_COMPILER_LAUNCHER: ccache
      CMAKE_CXX_COMPILER_LAUNCHER: ccache
      CCACHE_DIR: /root/.ccache
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
    steps:
      - name: Install git
        run: apt -y update && apt -y install --no-install-recommends git ca-certificates curl
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Install tools
        uses: ./.github/workflows/toolchain
        with:
          host: ${{ matrix.host }}
          python-version: ${{ env.PYTHON_VERSION }}
      # Ccache
      - name: Prepare ccache directory
        run: mkdir -p "${{ env.CCACHE_DIR }}"
      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-linux-bin-${{ matrix.host }}-ccache-${{ github.run_id }}
          restore-keys: ${{ runner.os }}-linux-bin-${{ matrix.host }}-ccache
      # Configure
      - name: Configure
        run: |
          host="${{ matrix.host }}"
          staging="/opt/$host"
          case $host in
            aarch64*) quadmath=Off ;;
            *)        quadmath=On ;;
          esac
          cmake -B package -S. \
            -G "Ninja Multi-Config" \
            -D BUILD_SHARED_LIBS=On \
            -D CMAKE_POSITION_INDEPENDENT_CODE=On \
            -D ALPAQA_WITH_EXAMPLES=Off \
            -D ALPAQA_WITH_TESTS=Off \
            -D ALPAQA_WARNINGS_AS_ERRORS=On \
            -D ALPAQA_WITH_SINGLE_PRECISION=On \
            -D ALPAQA_WITH_LONG_DOUBLE=On \
            -D ALPAQA_WITH_QUAD_PRECISION=$quadmath \
            -D ALPAQA_WITH_CASADI=On \
            -D ALPAQA_WITH_EXTERNAL_CASADI=Off \
            -D ALPAQA_WITH_IPOPT=On \
            -D ALPAQA_WITH_CUTEST=On \
            -D ALPAQA_WITH_CUTEST_EXAMPLES=Off \
            -D ALPAQA_WITH_DRIVERS=On \
            -D ALPAQA_WITH_GRADIENT_CHECKER=On \
            -D CMAKE_TOOLCHAIN_FILE="$staging/$host.toolchain.cmake" \
            -D CMAKE_PREFIX_PATH="$staging/mumps/usr/local;$staging/ipopt/usr/local" \
            -D CMAKE_FIND_ROOT_PATH="$staging/eigen;$staging/openblas;$staging/mumps;$staging/ipopt"
        env:
          CXXFLAGS: '-static-libstdc++'
      - name: Install Build Wrapper
        uses: SonarSource/sonarqube-scan-action/install-build-wrapper@v4
        env:
          SONAR_HOST_URL: ${{secrets.SONAR_HOST_URL}}
      # Build
      # - name: Build RelWithDebInfo
      #   run: |
      #     cmake --build package --config RelWithDebInfo -j
      - name: Build Debug
        run: |
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build package --config Debug -j
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{secrets.SONAR_HOST_URL}}
        with:
          args: >
            -Dsonar.projectKey=joe-tingsanchali-sonarsource_alpaqa_eab23f6a-ff95-42e6-a598-339455492fe4
            -Dsonar.cfamily.compile-commands="${{ env.BUILD_WRAPPER_OUT_DIR }}/compile_commands.json"
