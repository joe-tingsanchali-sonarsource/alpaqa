name: Python build
description: Cross-compile the Python package
inputs:
  host:
    required: true
    description: >
      The GNU host triple of the system to cross-compile for, e.g.
      'x64_64-bionic-linux-gnu'.
  python-version:
    required: true
    description: >
      The Python version to use for the build, e.g. 'python3.13' or
      `pypy3.10-v7.3`.
  build-args:
    required: false
    default: '-w'
    description: >
      Arguments to pass to the PyPA build tool. By default, we build a wheel
      directly. Set to '' to build a source distribution first.
  source-dir:
    required: false
    default: '.'
    description: >
      The directory containing the Python package to build.
  sudo:
    required: false
    default: 'sudo'
    description: >
      The sudo argument to use. Set to '' if already running as root.
  ccache:
    required: false
    default: ''
    description: >
      The ccache program to use during the build.

runs:
  using: composite
  steps:

    # Cache the Conan cache folder to speed up installation of the dependencies.
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.conan2/p
        # Key is unique, to force updating the cache, but we still want the
        # cache to be restored, so we use restore-keys with a matching prefix.
        key: ${{ runner.os }}-${{ inputs.host }}-${{ github.sha }}
        restore-keys: ${{ runner.os }}-${{ inputs.host }}-

    # Download a cross-compilation toolchain and Python binaries
    - name: Download toolchains
      shell: bash
      run: |
        url=https://github.com/tttapa/toolchains/releases/download/1.0.1
        file=x-tools-${{ inputs.host }}-gcc14.tar.xz
        wget "$url/$file" -O- | ${{ inputs.sudo }} tar xJ -C /opt
        ${{ inputs.sudo }} chmod u+w /opt/x-tools/${{ inputs.host }}
        url=https://github.com/tttapa/python-dev/releases/download/0.0.7
        file=python-dev-${{ inputs.host }}.tar.xz
        wget "$url/$file" -O- | ${{ inputs.sudo }} tar xJ -C /opt
    # Install runtime libraries
    - name: Install runtime libraries
      if: ${{ startsWith(inputs.host, 'x86_64-') }}
      shell: bash
      run: |
        ${{ inputs.sudo }} cp /opt/x-tools/${{ inputs.host }}/${{ inputs.host }}/lib64/libgfortran.so.*.*.* /usr/local/lib
        ${{ inputs.sudo }} cp /opt/x-tools/${{ inputs.host }}/${{ inputs.host }}/lib64/libstdc++.so.*.*.* /usr/local/lib
        ${{ inputs.sudo }} ldconfig


    # Make sure that Conan, PyPA pip and build are installed and up-to-date.
    - name: Install Python tools
      shell: bash
      run: python3 -m pip install -U conan pip build cmake ninja

    # Create a Conan profile for the build and the host machine.
    # The build profile is detected by Conan automatically.
    # The host profile is based on the profile that is already available in
    # the toolchain we're using, and was generated by
    # https://github.com/tttapa/toolchains/blob/main/gen-conan-profile.py.
    # This profile selects the right compilers for cross-compilation, and
    # includes the a CMake toolchain file that knows how to locate the Python
    # libraries for the host. This toolchain file is generated by
    # https://github.com/tttapa/toolchains/blob/main/gen-cmake-toolchain.py
    # We append a configuration setting to it to specifically ask for a
    # multi-config CMake generator, since that's what we'll be using to build
    # the Python package later on.
    - name: Prepare Conan configuration
      working-directory: ${{ inputs.source-dir }}
      shell: bash
      run: |
        conan profile detect -f
        pyver="${{ inputs.python-version }}"
        cat <<- EOF > conan.profile
        include(/opt/x-tools/${{ inputs.host }}.${pyver%%[0-9]*}.profile.conan)
        include(${{ github.workspace }}/scripts/ci/alpaqa-python.profile)
        include(${{ github.workspace }}/scripts/ci/${{ inputs.host }}.profile)
        [conf]
        tools.cmake.cmaketoolchain:generator=Ninja Multi-Config
        tools.build:skip_test=true
        [buildenv]
        CFLAGS=-fdiagnostics-color
        CXXFLAGS=-fdiagnostics-color
        LDFLAGS=-static-libgcc -static-libstdc++ -flto=auto
        EOF

    # Custom recipes needed for some of the dependencies.
    - name: Install Conan recipes
      working-directory: ${{ inputs.source-dir }}
      shell: bash
      run: |
        recipes="${{ github.workspace }}/tttapa-conan-recipes"
        git clone https://github.com/tttapa/conan-recipes "$recipes"
        conan remote add tttapa-conan-recipes "$recipes" --force

    # We now call conan install to install the dependencies for our project, so
    # they are available when we go on to build our package later.
    - name: Install dependencies
      working-directory: ${{ inputs.source-dir }}
      shell: bash
      run: |
        for c in Debug Release; do
            conan install . --build=missing -pr:h conan.profile -s build_type=$c
        done

    # We need to write a py-build-cmake configuration file so it uses the
    # CMakeDeps toolchain file generated by Conan. Note that we select the
    # configurations we want to include in our package, and we select the
    # right CMake generator. This should match the configurations and generator
    # we used in the “Prepare Conan configuration” step above.
    # Finally, we can specify some CMake options: the USE_GLOBAL_PYBIND11 option
    # is used in cmake/QueryPythonForPybind11.cmake, and ensures that
    # find_package is used to locate the version of pybind11 that was installed
    # by Conan, rather than the one in the Python virtual environment.
    - name: Configure py-build-cmake options
      working-directory: ${{ inputs.source-dir }}
      shell: bash
      run: |
        cat <<- EOF > conan-py-build-cmake.cross.pbc
        # Inherit from the Linux options
        os=linux
        # The toolchain is set by the Conan CMake preset, so we unset it here.
        toolchain_file=!
        # Use Conan's version of pybind11
        cmake.options.USE_GLOBAL_PYBIND11=true
        EOF

    # After setting up all configuration files, we can finally build the Python
    # package using the PyPA build tool. Note that we provide two cross-
    # compilation config files:
    # The first one is included with the toolchain and sets up the necessary
    # general settings for cross-compilation. It is generated by
    # https://github.com/tttapa/python-dev/blob/main/gen-py-build-cmake-cross-config.py
    # The second is the project-specific file we just created in the “Configure
    # package” step above. It should be included last because it overrides the
    # 'toolchain_file' option that is also set by the first config file.
    - name: Build package
      working-directory: ${{ inputs.source-dir }}
      shell: bash
      run: |
        python3 -m build ${{ inputs.build-args }} . \
            -C local="${{ github.workspace }}/scripts/ci/py-build-cmake.toml" \
            -C cross=/opt/x-tools/${{ inputs.host }}.${{ inputs.python-version }}.py-build-cmake.cross.toml \
            -C cross=conan-py-build-cmake.cross.pbc
      env:
        CMAKE_C_COMPILER_LAUNCHER: ${{ inputs.ccache }}
        CMAKE_CXX_COMPILER_LAUNCHER: ${{ inputs.ccache }}
