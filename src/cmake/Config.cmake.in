@PACKAGE_INIT@

include(CMakeFindDependencyMacro)
find_dependency(Eigen3 CONFIG)

if (@ALPAQA_WITH_OPENMP@)
    find_dependency(OpenMP COMPONENTS CXX)
endif()

include("${CMAKE_CURRENT_LIST_DIR}/alpaqa-Targets.cmake")

set(ALPAQA_OPTIONAL_COMPONENTS @ALPAQA_OPTIONAL_COMPONENTS@)
# If no components are requested, provide just the library
if (NOT alpaqa_FIND_COMPONENTS)
    set(alpaqa_FIND_COMPONENTS "lib")
    set(alpaqa_FIND_REQUIRED_lib True)
endif()
# The bin component requires all available components
if ("bin" IN_LIST alpaqa_FIND_COMPONENTS)
    list(APPEND alpaqa_FIND_COMPONENTS ${ALPAQA_OPTIONAL_COMPONENTS})
endif()
# Special component "all" imports all available components
if ("all" IN_LIST alpaqa_FIND_COMPONENTS)
    set(alpaqa_FIND_COMPONENTS ${ALPAQA_OPTIONAL_COMPONENTS})
    set(alpaqa_FIND_REQUIRED_lib True)
endif()
# Any component except "dl_dev" requires the libraries
if (NOT alpaqa_FIND_COMPONENTS STREQUAL "dl_dev")
    list(APPEND alpaqa_FIND_COMPONENTS "lib")
endif()
list(REMOVE_DUPLICATES alpaqa_FIND_COMPONENTS)
set(alpaqa_FIND_COMPONENTS_REMAINING ${alpaqa_FIND_COMPONENTS})

# CasADi is special: we allow not finding CasADi, even if this version of
# alpaqa was built with CasADi support enabled
if ("casadi" IN_LIST alpaqa_FIND_COMPONENTS_REMAINING)
    if (alpaqa_FIND_REQUIRED_casadi)
        find_dependency(casadi CONFIG)
    else()
        find_package(casadi CONFIG)
    endif()
endif()

# Import the targets for the given component (if available)
macro(alpaqa_load_component COMP DO_IMPORT)
    if (${COMP} IN_LIST alpaqa_FIND_COMPONENTS_REMAINING)
        set(TGT_FILE "${CMAKE_CURRENT_LIST_DIR}/alpaqa-${COMP}Targets.cmake")
        if (EXISTS ${TGT_FILE} AND ${DO_IMPORT})
            include(${TGT_FILE})
            list(APPEND ALPAQA_AVAILABLE_COMPONENTS ${COMP})
            set(alpaqa_${COMP}_FOUND True)
            message(STATUS "Found alpaqa component ${COMP}")
        endif()
        list(REMOVE_ITEM alpaqa_FIND_COMPONENTS_REMAINING ${COMP})
    endif()
endmacro()

message(STATUS "${alpaqa_FOUND}")
alpaqa_load_component(lib True)
message(STATUS "${alpaqa_FOUND}")
alpaqa_load_component(casadi ${casadi_FOUND})
message(STATUS "${alpaqa_FOUND}")
alpaqa_load_component(dl_dev True)
message(STATUS "${alpaqa_FOUND}")
alpaqa_load_component(extra True)
message(STATUS "${alpaqa_FOUND}")
alpaqa_load_component(bin True)
message(STATUS "${alpaqa_FOUND}")
message(STATUS "rem: ${alpaqa_FIND_COMPONENTS_REMAINING}")

if (alpaqa_FIND_COMPONENTS_REMAINING)
    message(STATUS "fail")
    set(alpaqa_FOUND False)
    set(alpaqa_NOT_FOUND_MESSAGE "Unsupported components: ${alpaqa_FIND_COMPONENTS_REMAINING}")
    return()
endif()
message(STATUS "comp ok")

set(ALPAQA_WITH_QUAD_PRECISION @ALPAQA_WITH_QUAD_PRECISION@ CACHE INTERNAL "")
set(ALPAQA_WITH_SINGLE_PRECISION @ALPAQA_WITH_SINGLE_PRECISION@ CACHE INTERNAL "")
set(ALPAQA_WITH_LONG_DOUBLE @ALPAQA_WITH_LONG_DOUBLE@ CACHE INTERNAL "")
set(ALPAQA_WITH_DRIVERS @ALPAQA_WITH_DRIVERS@ CACHE INTERNAL "")
set(ALPAQA_WITH_OCP @ALPAQA_WITH_OCP@ CACHE INTERNAL "")

message(STATUS "print")
if (NOT _@PROJECT_NAME@_PRINTED AND "lib" IN_LIST ALPAQA_AVAILABLE_COMPONENTS)
    set(ALPAQA_INSTALLED_COMPONENTS @ALPAQA_OPTIONAL_COMPONENTS@)
    get_target_property(ALPAQA_CONFIG alpaqa::alpaqa IMPORTED_CONFIGURATIONS)
    message(STATUS "Found @PROJECT_NAME@ @PROJECT_VERSION@: ${CMAKE_CURRENT_LIST_DIR} (available configs: ${ALPAQA_CONFIG}, available components: ${ALPAQA_AVAILABLE_COMPONENTS}, installed components: ${ALPAQA_INSTALLED_COMPONENTS}, installed targets: @ALPAQA_INSTALL_TARGETS@)")
    set(_@PROJECT_NAME@_PRINTED On CACHE INTERNAL "")
endif()
message(STATUS "done")
message(STATUS "${alpaqa_FOUND}")

check_required_components(alpaqa)
